#!/bin/bash

set -e

# To upload to github.io repo
# git clone https://${GH_TOKEN}@github.com/ryan-mcclue/ryan-mcclue.github.io musings

# IMPORTANT(Ryan): Will be environment variables on CI machine
if [ -z "$CLIENT_ID" ]; then
  CLIENT_ID=$(jq '.client_id' misc/credentials.json)
fi

if [ -z "$CLIENT_SECRET" ]; then
  CLIENT_SECRET=$(jq '.client_secret' misc/credentials.json)
fi

if [ -z "$REFRESH_TOKEN" ]; then
  REFRESH_TOKEN=$(jq '.refresh_token' misc/credentials.json)
fi

AUTH_CODE=$(jq '.auth_code' misc/credentials.json)


__print_authorisation_key_link()
{
  # NOTE(Ryan): Obtained from Google OAuth Discovery Document
  # https://accounts.google.com/.well-known/openid-configuration
  local endpoint="https://accounts.google.com/o/oauth2/v2/auth"
  # IMPORTANT(Ryan): Deprecated
  # local redirect_uri="urn:ietf:wg:oauth:2.0:oob"
  local redirect_uri="http://localhost:1/"
  # NOTE(Ryan): https://developers.google.com/identity/protocols/oauth2/scopes 
  local scope="https://www.googleapis.com/auth/photoslibrary"
  local response_type="code"

  printf "Obtain authorisation code from the following link:\n"
  printf "$endpoint?client_id=$CLIENT_ID&redirect_uri=$redirect_uri\
&scope=$scope&response_type=$response_type\n"

  printf "\nIMPORTANT: CODE WILL BE OBTAINED FROM ADDRESS BAR ON FAILED WEBPAGE SCREEN!\n"
}

__generate_tokens()
{
  local endpoint="https://oauth2.googleapis.com/token"
  local redirect_uri="http://localhost:1/"

  curl --silent --request POST \
  --data "code=$AUTH_CODE&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET\
&redirect_uri=$redirect_uri&grant_type=authorization_code" \
  "$endpoint"
}

# https://developers.google.com/photos/library/reference/rest
upload_photos()
{
  # NOTE(Ryan): Refresh access token
  local endpoint="https://oauth2.googleapis.com/token"
  local access_token=$(curl --silent --request POST \
  --data "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET\
&refresh_token=$REFRESH_TOKEN&grant_type=refresh_token" \
"$endpoint" | jq '.access_token')

  if [ ! $? -eq 0 ]; then
    printf "Error: Unable to retrieve refresh access token\n" >&2
  fi

  for photo in photos/*; do
    # NOTE(Ryan): Upload photo bytes
    local endpoint="https://photoslibrary.googleapis.com/v1/uploads"
    curl --silent --request POST \
    --header "Authorization: Bearer $access_token" \
    --header 'Content-type: application/octet_stream' \
    --header 'X-Goog-Upload-Content-Type: image/jpeg' \
    --header 'X-Goog-Upload-Protocol: raw' \
    --data-binary "@$photo"
    "$endpoint"

    local photo_remove_base="${photo##*/}"
    local photo_name="${photo_remove_base%%jpeg-1.jpg}"

    local media_json="{
       \"newMediaItems\": [ 
       {
         \"description\": \"$photo_name spec information\",
         \"simpleMediaItem\": {
            \"fileName\": \"$photo_name\",
            \"uploadToken\": \"$upload_token\"
          }
        }
      ] 
    }"
    
    # NOTE(Ryan): Create media item from photo bytes 
    local endpoint="https://photoslibrary.googleapis.com/v1/mediaItems:batchCreate"
    curl --silent --request POST \
    --header 'Content-type: application/json' \
    --header "Authorization: Bearer $access_token" \
    --data "$media_json"
    "$endpoint"
  done
}

# __print_authorisation_key_link
# __tokens
# upload_photos
